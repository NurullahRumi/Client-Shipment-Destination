/*Copyright (c) 2018-2019 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetCalcTotalLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch Calculation total")
    public ProcRf2000pk0OclovgetCalcTotalLovResponse executeProcRF2000PK0_OCLOVGetCalcTotalLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetCalcTotalLOV");
        ProcRf2000pk0OclovgetCalcTotalLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetCalcTotalLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetCalcTotalLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetCalcMethodLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch Calculation Method")
    public ProcRf2000pk0OclovgetCalcMethodLovResponse executeProcRF2000PK0_OCLOVGetCalcMethodLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetCalcMethodLOV");
        ProcRf2000pk0OclovgetCalcMethodLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetCalcMethodLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetCalcMethodLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetCurrencyLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch currency lov")
    public ProcRf2000pk0OclovgetCurrencyLovResponse executeProcRF2000PK0_OCLOVGetCurrencyLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pFCountry", required = false) String pfcountry, @RequestParam(value = "pTCountry", required = false) String ptcountry, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetCurrencyLOV");
        ProcRf2000pk0OclovgetCurrencyLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetCurrencyLOV(pprgId, pfcountry, ptcountry);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetCurrencyLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetFreightTermsLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get freight terms LOV")
    public ProcRf2000pk0OclovgetFreightTermsLovResponse executeProcRF2000PK0_OCLOVGetFreightTermsLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetFreightTermsLOV");
        ProcRf2000pk0OclovgetFreightTermsLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetFreightTermsLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetFreightTermsLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTInsFreightDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To insert a new Freight Details")
    public Void executeProcOC1000PK0_FREIGHTInsFreightDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, @RequestParam(value = "pShpTyp", required = false) String pshpTyp, @RequestParam(value = "pShpdest", required = false) String pshpdest, @RequestParam(value = "pForwardern", required = false) String pforwardern, @RequestParam(value = "pContainerTyp", required = false) String pcontainerTyp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTInsFreightDetails");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTInsFreightDetails(pprgId, pctycod, pshpdestctycod, pshpTyp, pshpdest, pforwardern, pcontainerTyp);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTInsFreightDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTUpdClientShp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To update client shipment")
    public Void executeProcOC1000PK0_FREIGHTUpdClientShp(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pClient", required = false) String pclient, @RequestParam(value = "pSeqNr", required = false) Integer pseqNr, @RequestParam(value = "pFreightTerm", required = false) String pfreightTerm, @RequestParam(value = "pShpdest", required = false) String pshpdest, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTUpdClientShp");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTUpdClientShp(pprgId, pclient, pseqNr, pfreightTerm, pshpdest, pshpdestctycod);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTUpdClientShp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTInsCostDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To insert new cost and freight details")
    public Void executeProcOC1000PK0_FREIGHTInsCostDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShpTyp", required = false) String pshpTyp, @RequestParam(value = "pForwardern", required = false) String pforwardern, @RequestParam(value = "pShpdest", required = false) String pshpdest, @RequestParam(value = "pItemcat", required = false) String pitemcat, @RequestParam(value = "pItemdes", required = false) String pitemdes, @RequestParam(value = "pContainerTpy", required = false) String pcontainerTpy, @RequestParam(value = "pQtyUOM", required = false) String pqtyUom, @RequestParam(value = "pQtyFrom", required = false) Double pqtyFrom, @RequestParam(value = "pQtyTo", required = false) Double pqtyTo, @RequestParam(value = "pCalcMethod", required = false) String pcalcMethod, @RequestParam(value = "pCurrencyCod", required = false) String pcurrencyCod, @RequestParam(value = "pCurPerUnit", required = false) Double pcurPerUnit, @RequestParam(value = "pFreightSts", required = false) String pfreightSts, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, @RequestParam(value = "pCurperitem", required = false) Double pcurperitem, @RequestParam(value = "pCalcPercent", required = false) String pcalcPercent, @RequestParam(value = "pCalcSubTotalTyp", required = false) String pcalcSubTotalTyp, @RequestParam(value = "pSubtotalTyp", required = false) String psubtotalTyp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTInsCostDetails");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTInsCostDetails(pprgId, pctycod, pshpTyp, pforwardern, pshpdest, pitemcat, pitemdes, pcontainerTpy, pqtyUom, pqtyFrom, pqtyTo, pcalcMethod, pcurrencyCod, pcurPerUnit, pfreightSts, pshpdestctycod, pcurperitem, pcalcPercent, pcalcSubTotalTyp, psubtotalTyp);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTInsCostDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetCostDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get Cost and  Freight Details")
    public ProcOc1000pk0FreightgetCostDetailsResponse executeProcOC1000PK0_FREIGHTGetCostDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShpTyp", required = false) String pshpTyp, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetCostDetails");
        ProcOc1000pk0FreightgetCostDetailsResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetCostDetails(pprgId, pctycod, pshpTyp, pshpdestctycod);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetCostDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetAllLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch LOV")
    public ProcRf2000pk0OclovgetAllLovResponse executeProcRF2000PK0_OCLOVGetAllLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetAllLOV");
        ProcRf2000pk0OclovgetAllLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetAllLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetAllLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetItemCatLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch Item cat")
    public ProcRf2000pk0OclovgetItemCatLovResponse executeProcRF2000PK0_OCLOVGetItemCatLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetItemCatLOV");
        ProcRf2000pk0OclovgetItemCatLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetItemCatLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetItemCatLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_ORLOVGetCligrp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get Client grp LOV")
    public ProcRf2000pk0OrlovgetCligrpResponse executeProcRF2000PK0_ORLOVGetCligrp(@RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_ORLOVGetCligrp");
        ProcRf2000pk0OrlovgetCligrpResponse _result = procedureService.executeProcRF2000PK0_ORLOVGetCligrp(pprgid);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_ORLOVGetCligrp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetShpDestLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch shipment destination")
    public ProcRf2000pk0OclovgetShpDestLovResponse executeProcRF2000PK0_OCLOVGetShpDestLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetShpDestLOV");
        ProcRf2000pk0OclovgetShpDestLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetShpDestLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetShpDestLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_ORLOVGetOrdCtycodLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get country LOV")
    public ProcRf2000pk0OrlovgetOrdCtycodLovResponse executeProcRF2000PK0_ORLOVGetOrdCtycodLOV(@RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_ORLOVGetOrdCtycodLOV");
        ProcRf2000pk0OrlovgetOrdCtycodLovResponse _result = procedureService.executeProcRF2000PK0_ORLOVGetOrdCtycodLOV(pprgid);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_ORLOVGetOrdCtycodLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTDelFreightDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To delete freight details row")
    public Void executeProcOC1000PK0_FREIGHTDelFreightDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, @RequestParam(value = "pShpseq", required = false) Integer pshpseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTDelFreightDetails");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTDelFreightDetails(pprgId, pctycod, pshpdestctycod, pshpseq);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTDelFreightDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetAllCountryLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch all country code")
    public ProcRf2000pk0OclovgetAllCountryLovResponse executeProcRF2000PK0_OCLOVGetAllCountryLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetAllCountryLOV");
        ProcRf2000pk0OclovgetAllCountryLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetAllCountryLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetAllCountryLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTUpdCostDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To update freight and cost details")
    public Void executeProcOC1000PK0_FREIGHTUpdCostDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShptyp", required = false) String pshptyp, @RequestParam(value = "pFreightseqnr", required = false) Integer pfreightseqnr, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, @RequestParam(value = "pItemdes", required = false) String pitemdes, @RequestParam(value = "pCalcmethod", required = false) String pcalcmethod, @RequestParam(value = "pQtyUom", required = false) String pqtyUom, @RequestParam(value = "pCurperunit", required = false) Double pcurperunit, @RequestParam(value = "pCurperitem", required = false) Double pcurperitem, @RequestParam(value = "pCurrency", required = false) String pcurrency, @RequestParam(value = "pQtyfrom", required = false) Double pqtyfrom, @RequestParam(value = "pQtyto", required = false) Double pqtyto, @RequestParam(value = "pCalcpercent", required = false) Double pcalcpercent, @RequestParam(value = "pCalctotal", required = false) String pcalctotal, @RequestParam(value = "pSubtotal", required = false) String psubtotal, @RequestParam(value = "pSortseq", required = false) Integer psortseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTUpdCostDetails");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTUpdCostDetails(pprgId, pctycod, pshptyp, pfreightseqnr, pshpdestctycod, pitemdes, pcalcmethod, pqtyUom, pcurperunit, pcurperitem, pcurrency, pqtyfrom, pqtyto, pcalcpercent, pcalctotal, psubtotal, psortseq);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTUpdCostDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTCancelCostDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To update freightsts to C (cancel )")
    public Void executeProcOC1000PK0_FREIGHTCancelCostDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShptyp", required = false) String pshptyp, @RequestParam(value = "pFreightseqnr", required = false) Integer pfreightseqnr, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTCancelCostDetails");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTCancelCostDetails(pprgId, pctycod, pshptyp, pfreightseqnr);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTCancelCostDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetClientShp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch detail for client and shpdest")
    public ProcOc1000pk0FreightgetClientShpResponse executeProcOC1000PK0_FREIGHTGetClientShp(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCligrp", required = false) String pcligrp, @RequestParam(value = "pClient", required = false) String pclient, @RequestParam(value = "pFreightTerm", required = false) String pfreightTerm, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetClientShp");
        ProcOc1000pk0FreightgetClientShpResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetClientShp(pprgId, pcligrp, pclient, pfreightTerm);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetClientShp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetFreightTerm", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get freight term details")
    public ProcOc1000pk0FreightgetFreightTermResponse executeProcOC1000PK0_FREIGHTGetFreightTerm(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pFreightTerm", required = false) String pfreightTerm, @RequestParam(value = "pShpitemcat", required = false) String pshpitemcat, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetFreightTerm");
        ProcOc1000pk0FreightgetFreightTermResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetFreightTerm(pprgId, pfreightTerm, pshpitemcat);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetFreightTerm, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetShpTypLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch Shipment type")
    public ProcRf2000pk0OclovgetShpTypLovResponse executeProcRF2000PK0_OCLOVGetShpTypLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetShpTypLOV");
        ProcRf2000pk0OclovgetShpTypLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetShpTypLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetShpTypLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetShpContLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch shipment container type")
    public ProcRf2000pk0OclovgetShpContLovResponse executeProcRF2000PK0_OCLOVGetShpContLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetShpContLOV");
        ProcRf2000pk0OclovgetShpContLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetShpContLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetShpContLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTDelClientShp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To delete a selected row")
    public Void executeProcOC1000PK0_FREIGHTDelClientShp(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pClient", required = false) String pclient, @RequestParam(value = "pSeqNr", required = false) Integer pseqNr, @RequestParam(value = "pFreightTerm", required = false) String pfreightTerm, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTDelClientShp");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTDelClientShp(pprgId, pclient, pseqNr, pfreightTerm);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTDelClientShp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetAllLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch all LOVs")
    public ProcOc1000pk0FreightgetAllLovResponse executeProcOC1000PK0_FREIGHTGetAllLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pItemcod", required = false) String pitemcod, @RequestParam(value = "pFCountry", required = false) String pfcountry, @RequestParam(value = "pTCountry", required = false) String ptcountry, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetAllLOV");
        ProcOc1000pk0FreightgetAllLovResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetAllLOV(pprgId, pitemcod, pfcountry, ptcountry);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetAllLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetFreightDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get Freight Details")
    public ProcOc1000pk0FreightgetFreightDetailsResponse executeProcOC1000PK0_FREIGHTGetFreightDetails(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCtycod", required = false) String pctycod, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, @RequestParam(value = "pShptyp", required = false) String pshptyp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetFreightDetails");
        ProcOc1000pk0FreightgetFreightDetailsResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetFreightDetails(pprgId, pctycod, pshpdestctycod, pshptyp);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetFreightDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTGetLOVTitle", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get LOV Title")
    public ProcOc1000pk0FreightgetLovtitleResponse executeProcOC1000PK0_FREIGHTGetLOVTitle(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pLOVfld", required = false) String plovfld, @RequestParam(value = "pPromptType", required = false) String ppromptType, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTGetLOVTitle");
        ProcOc1000pk0FreightgetLovtitleResponse _result = procedureService.executeProcOC1000PK0_FREIGHTGetLOVTitle(pprgId, plovfld, ppromptType);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTGetLOVTitle, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetQtyUomLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch quantity UOM")
    public ProcRf2000pk0OclovgetQtyUomLovResponse executeProcRF2000PK0_OCLOVGetQtyUomLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pCalcMethod", required = false) String pcalcMethod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetQtyUomLOV");
        ProcRf2000pk0OclovgetQtyUomLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetQtyUomLOV(pprgId, pcalcMethod);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetQtyUomLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcOC1000PK0_FREIGHTInsClientShp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To insert Client shipment")
    public Void executeProcOC1000PK0_FREIGHTInsClientShp(@RequestParam(value = "pPrgId", required = false) String pprgId, @RequestParam(value = "pClient", required = false) String pclient, @RequestParam(value = "pFreightTerm", required = false) String pfreightTerm, @RequestParam(value = "pFromCounty", required = false) String pfromCounty, @RequestParam(value = "pShpdest", required = false) String pshpdest, @RequestParam(value = "pShpdestctycod", required = false) String pshpdestctycod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcOC1000PK0_FREIGHTInsClientShp");
        Void _result = procedureService.executeProcOC1000PK0_FREIGHTInsClientShp(pprgId, pclient, pfreightTerm, pfromCounty, pshpdest, pshpdestctycod);
        LOGGER.debug("got the result for named procedure: ProcOC1000PK0_FREIGHTInsClientShp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetShpTypCostLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRF2000PK0_OCLOVGetShpTypCostLOV")
    public ProcRf2000pk0OclovgetShpTypCostLovResponse executeProcRF2000PK0_OCLOVGetShpTypCostLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetShpTypCostLOV");
        ProcRf2000pk0OclovgetShpTypCostLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetShpTypCostLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetShpTypCostLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetClicodLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get client LOV filter by cligrp")
    public ProcRf2000pk0OclovgetClicodLovResponse executeProcRF2000PK0_OCLOVGetClicodLOV(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pCligrp", required = false) String pcligrp, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetClicodLOV");
        ProcRf2000pk0OclovgetClicodLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetClicodLOV(pprgid, pcligrp);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetClicodLOV, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRF2000PK0_OCLOVGetAllShpDestLOV", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To fetch all shipment destination + %")
    public ProcRf2000pk0OclovgetAllShpDestLovResponse executeProcRF2000PK0_OCLOVGetAllShpDestLOV(@RequestParam(value = "pPrgId", required = false) String pprgId, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRF2000PK0_OCLOVGetAllShpDestLOV");
        ProcRf2000pk0OclovgetAllShpDestLovResponse _result = procedureService.executeProcRF2000PK0_OCLOVGetAllShpDestLOV(pprgId);
        LOGGER.debug("got the result for named procedure: ProcRF2000PK0_OCLOVGetAllShpDestLOV, result:{}", _result);
        return _result;
    }

}