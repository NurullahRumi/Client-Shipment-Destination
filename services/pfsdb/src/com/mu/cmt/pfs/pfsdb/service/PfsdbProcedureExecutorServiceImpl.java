/*Copyright (c) 2018-2019 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl implements PfsdbProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetCalcTotalLovResponse executeProcRF2000PK0_OCLOVGetCalcTotalLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetCalcTotalLOV", params, ProcRf2000pk0OclovgetCalcTotalLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetCalcMethodLovResponse executeProcRF2000PK0_OCLOVGetCalcMethodLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetCalcMethodLOV", params, ProcRf2000pk0OclovgetCalcMethodLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetCurrencyLovResponse executeProcRF2000PK0_OCLOVGetCurrencyLOV(String pprgId, String pfcountry, String ptcountry) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pFCountry", pfcountry);
        params.put("pTCountry", ptcountry);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetCurrencyLOV", params, ProcRf2000pk0OclovgetCurrencyLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetFreightTermsLovResponse executeProcRF2000PK0_OCLOVGetFreightTermsLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetFreightTermsLOV", params, ProcRf2000pk0OclovgetFreightTermsLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTInsFreightDetails(String pprgId, String pctycod, String pshpdestctycod, String pshpTyp, String pshpdest, String pforwardern, String pcontainerTyp) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShpdestctycod", pshpdestctycod);
        params.put("pShpTyp", pshpTyp);
        params.put("pShpdest", pshpdest);
        params.put("pForwardern", pforwardern);
        params.put("pContainerTyp", pcontainerTyp);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTInsFreightDetails", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTUpdClientShp(String pprgId, String pclient, Integer pseqNr, String pfreightTerm, String pshpdest, String pshpdestctycod) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgId", pprgId);
        params.put("pClient", pclient);
        params.put("pSeqNr", pseqNr);
        params.put("pFreightTerm", pfreightTerm);
        params.put("pShpdest", pshpdest);
        params.put("pShpdestctycod", pshpdestctycod);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTUpdClientShp", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTInsCostDetails(String pprgId, String pctycod, String pshpTyp, String pforwardern, String pshpdest, String pitemcat, String pitemdes, String pcontainerTpy, String pqtyUom, Double pqtyFrom, Double pqtyTo, String pcalcMethod, String pcurrencyCod, Double pcurPerUnit, String pfreightSts, String pshpdestctycod, Double pcurperitem, String pcalcPercent, String pcalcSubTotalTyp, String psubtotalTyp) {
        Map<String, Object> params = new HashMap<>(20);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShpTyp", pshpTyp);
        params.put("pForwardern", pforwardern);
        params.put("pShpdest", pshpdest);
        params.put("pItemcat", pitemcat);
        params.put("pItemdes", pitemdes);
        params.put("pContainerTpy", pcontainerTpy);
        params.put("pQtyUOM", pqtyUom);
        params.put("pQtyFrom", pqtyFrom);
        params.put("pQtyTo", pqtyTo);
        params.put("pCalcMethod", pcalcMethod);
        params.put("pCurrencyCod", pcurrencyCod);
        params.put("pCurPerUnit", pcurPerUnit);
        params.put("pFreightSts", pfreightSts);
        params.put("pShpdestctycod", pshpdestctycod);
        params.put("pCurperitem", pcurperitem);
        params.put("pCalcPercent", pcalcPercent);
        params.put("pCalcSubTotalTyp", pcalcSubTotalTyp);
        params.put("pSubtotalTyp", psubtotalTyp);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTInsCostDetails", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetCostDetailsResponse executeProcOC1000PK0_FREIGHTGetCostDetails(String pprgId, String pctycod, String pshpTyp, String pshpdestctycod) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShpTyp", pshpTyp);
        params.put("pShpdestctycod", pshpdestctycod);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetCostDetails", params, ProcOc1000pk0FreightgetCostDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetAllLovResponse executeProcRF2000PK0_OCLOVGetAllLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetAllLOV", params, ProcRf2000pk0OclovgetAllLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetItemCatLovResponse executeProcRF2000PK0_OCLOVGetItemCatLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetItemCatLOV", params, ProcRf2000pk0OclovgetItemCatLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OrlovgetCligrpResponse executeProcRF2000PK0_ORLOVGetCligrp(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_ORLOVGetCligrp", params, ProcRf2000pk0OrlovgetCligrpResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetShpDestLovResponse executeProcRF2000PK0_OCLOVGetShpDestLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetShpDestLOV", params, ProcRf2000pk0OclovgetShpDestLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OrlovgetOrdCtycodLovResponse executeProcRF2000PK0_ORLOVGetOrdCtycodLOV(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_ORLOVGetOrdCtycodLOV", params, ProcRf2000pk0OrlovgetOrdCtycodLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTDelFreightDetails(String pprgId, String pctycod, String pshpdestctycod, Integer pshpseq) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShpdestctycod", pshpdestctycod);
        params.put("pShpseq", pshpseq);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTDelFreightDetails", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetAllCountryLovResponse executeProcRF2000PK0_OCLOVGetAllCountryLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetAllCountryLOV", params, ProcRf2000pk0OclovgetAllCountryLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTUpdCostDetails(String pprgId, String pctycod, String pshptyp, Integer pfreightseqnr, String pshpdestctycod, String pitemdes, String pcalcmethod, String pqtyUom, Double pcurperunit, Double pcurperitem, String pcurrency, Double pqtyfrom, Double pqtyto, Double pcalcpercent, String pcalctotal, String psubtotal, Integer psortseq) {
        Map<String, Object> params = new HashMap<>(17);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShptyp", pshptyp);
        params.put("pFreightseqnr", pfreightseqnr);
        params.put("pShpdestctycod", pshpdestctycod);
        params.put("pItemdes", pitemdes);
        params.put("pCalcmethod", pcalcmethod);
        params.put("pQtyUom", pqtyUom);
        params.put("pCurperunit", pcurperunit);
        params.put("pCurperitem", pcurperitem);
        params.put("pCurrency", pcurrency);
        params.put("pQtyfrom", pqtyfrom);
        params.put("pQtyto", pqtyto);
        params.put("pCalcpercent", pcalcpercent);
        params.put("pCalctotal", pcalctotal);
        params.put("pSubtotal", psubtotal);
        params.put("pSortseq", psortseq);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTUpdCostDetails", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTCancelCostDetails(String pprgId, String pctycod, String pshptyp, Integer pfreightseqnr) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShptyp", pshptyp);
        params.put("pFreightseqnr", pfreightseqnr);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTCancelCostDetails", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetClientShpResponse executeProcOC1000PK0_FREIGHTGetClientShp(String pprgId, String pcligrp, String pclient, String pfreightTerm) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgId", pprgId);
        params.put("pCligrp", pcligrp);
        params.put("pClient", pclient);
        params.put("pFreightTerm", pfreightTerm);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetClientShp", params, ProcOc1000pk0FreightgetClientShpResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetFreightTermResponse executeProcOC1000PK0_FREIGHTGetFreightTerm(String pprgId, String pfreightTerm, String pshpitemcat) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pFreightTerm", pfreightTerm);
        params.put("pShpitemcat", pshpitemcat);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetFreightTerm", params, ProcOc1000pk0FreightgetFreightTermResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetShpTypLovResponse executeProcRF2000PK0_OCLOVGetShpTypLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetShpTypLOV", params, ProcRf2000pk0OclovgetShpTypLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetShpContLovResponse executeProcRF2000PK0_OCLOVGetShpContLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetShpContLOV", params, ProcRf2000pk0OclovgetShpContLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTDelClientShp(String pprgId, String pclient, Integer pseqNr, String pfreightTerm) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pClient", pclient);
        params.put("pSeqNr", pseqNr);
        params.put("pFreightTerm", pfreightTerm);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTDelClientShp", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetAllLovResponse executeProcOC1000PK0_FREIGHTGetAllLOV(String pprgId, String pitemcod, String pfcountry, String ptcountry) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgId", pprgId);
        params.put("pItemcod", pitemcod);
        params.put("pFCountry", pfcountry);
        params.put("pTCountry", ptcountry);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetAllLOV", params, ProcOc1000pk0FreightgetAllLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetFreightDetailsResponse executeProcOC1000PK0_FREIGHTGetFreightDetails(String pprgId, String pctycod, String pshpdestctycod, String pshptyp) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgId", pprgId);
        params.put("pCtycod", pctycod);
        params.put("pShpdestctycod", pshpdestctycod);
        params.put("pShptyp", pshptyp);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetFreightDetails", params, ProcOc1000pk0FreightgetFreightDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcOc1000pk0FreightgetLovtitleResponse executeProcOC1000PK0_FREIGHTGetLOVTitle(String pprgId, String plovfld, String ppromptType) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgId", pprgId);
        params.put("pLOVfld", plovfld);
        params.put("pPromptType", ppromptType);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTGetLOVTitle", params, ProcOc1000pk0FreightgetLovtitleResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetQtyUomLovResponse executeProcRF2000PK0_OCLOVGetQtyUomLOV(String pprgId, String pcalcMethod) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgId", pprgId);
        params.put("pCalcMethod", pcalcMethod);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetQtyUomLOV", params, ProcRf2000pk0OclovgetQtyUomLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcOC1000PK0_FREIGHTInsClientShp(String pprgId, String pclient, String pfreightTerm, String pfromCounty, String pshpdest, String pshpdestctycod) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgId", pprgId);
        params.put("pClient", pclient);
        params.put("pFreightTerm", pfreightTerm);
        params.put("pFromCounty", pfromCounty);
        params.put("pShpdest", pshpdest);
        params.put("pShpdestctycod", pshpdestctycod);

        return procedureExecutor.executeNamedProcedure("ProcOC1000PK0_FREIGHTInsClientShp", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetShpTypCostLovResponse executeProcRF2000PK0_OCLOVGetShpTypCostLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetShpTypCostLOV", params, ProcRf2000pk0OclovgetShpTypCostLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetClicodLovResponse executeProcRF2000PK0_OCLOVGetClicodLOV(String pprgid, String pcligrp) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pCligrp", pcligrp);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetClicodLOV", params, ProcRf2000pk0OclovgetClicodLovResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OclovgetAllShpDestLovResponse executeProcRF2000PK0_OCLOVGetAllShpDestLOV(String pprgId) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgId", pprgId);

        return procedureExecutor.executeNamedProcedure("ProcRF2000PK0_OCLOVGetAllShpDestLOV", params, ProcRf2000pk0OclovgetAllShpDestLovResponse.class);
    }

}